diff --git a/src/sparseml/pytorch/yolov8/README.md b/src/sparseml/pytorch/yolov8/README.md
index 861b54314d..f0ea333489 100644
--- a/src/sparseml/pytorch/yolov8/README.md
+++ b/src/sparseml/pytorch/yolov8/README.md
@@ -17,7 +17,7 @@ sparseml.ultralytics.train
 
 Use `--help` for more information on flags.
 
-## Sparsifying segmentation models
+## Sparsifying detection models
 
 First, you'll need to create a recipe to sparsify yolov8.
 
@@ -55,3 +55,18 @@ for dense training:
 ```bash
 sparseml.ultralytics.train --recipe yolov8-pq.yaml
 ```
+
+## ONNX export
+
+To export the trained model to ONNX format, execute the appropriate
+CLI command and specify the path to the `.pt` model:
+
+```bash
+sparseml.ultralytics.export --model /.../model.pt
+```
+
+To look up optional arguments for the `export` command, run:
+
+```bash
+sparseml.ultralytics.export -h
+```
diff --git a/src/sparseml/pytorch/yolov8/trainers.py b/src/sparseml/pytorch/yolov8/trainers.py
index f3e2347f5a..2110bbe52a 100644
--- a/src/sparseml/pytorch/yolov8/trainers.py
+++ b/src/sparseml/pytorch/yolov8/trainers.py
@@ -274,7 +274,7 @@ class SparseTrainer(BaseTrainer):
             self.steps_per_epoch = len(self.train_loader)  # / self.accumulate
 
             self.scaler = self.manager.modify(
-                self.model,
+                self.model if not hasattr(self.model, "model") else self.model,
                 self.optimizer,
                 steps_per_epoch=self.steps_per_epoch,
                 epoch=self.start_epoch,
